from apps.retriever import Retriever

from typing import List
from pydantic import BaseModel

from fastapi import FastAPI, HTTPException
import uvicorn
import logging


MODEL_CHECKPOINT = "intfloat/multilingual-e5-small"

retriever = Retriever(model_name = MODEL_CHECKPOINT)

app = FastAPI()

class EmbeddingResponse(BaseModel):
    """ 
    Response model for embedding generation endpoint.
    Fields:
        embeddings (List[List[float]]): A list of generated embeddings, where each embedding is a list of floats
    """
    embeddings: List[List[float]]

class TextRequest(BaseModel):
    """ 
    Request model for embedding generation endpoint.

    Fields:
        texts (List[str]): A list of text strings to generate embeddings for.
        is_query (bool, optional): Flag indicating whether the texts are queries (default) or passages. Defaults to True.
        
    """
    texts: List[str]
    is_query: bool = True


@app.post("/create_embeddings", response_model=EmbeddingResponse)
async def create_embeddings(request: TextRequest): # texts: list[str], is_query: bool = True
    """
    Generates embeddings for the provided texts.

    Args:
        request (TextRequest): Request object containing texts and is_query flag.

    Returns:
        EmbeddingResponse: Response object containing generated embeddings.

    Raises:
        HTTPException(400): If an empty list of texts is provided.
        HTTPException(500): If an error occurs during embedding generation.
    """

    texts = request.texts
    is_query = request.is_query

    print("Количество текстов: ",len(texts))
    try:
        if not texts:
            raise HTTPException(status_code=400, detail="Получен пустой список текстов")
        
        embeddings = retriever.get_embeddings(texts, is_query)
        print(embeddings.shape)
        return {"embeddings": embeddings.tolist()}
    
    except Exception as e:
        logging.error(f"Ошибка при генерации эмбеддингов: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Ошибка при обработке запроса: {str(e)}")


@app.get("/get_embeddings_dims")
async def get_embeddings_dims():
    """
    Returns the dimensionality of the embeddings generated by the current model.

    Returns:
        dict: Dictionary with key "embeddings_dims" containing the embedding dimension.
    """
    embeddings_dims = retriever.embedding_dim
    return {"embeddings_dims": embeddings_dims}

@app.post("/init_model")
async def init_model(model_checkpoint: str):
    """
    Initializes the model with a custom checkpoint.

    Args:
        model_checkpoint (str): Name/path of the model checkpoint to initialize from Hugging Face.

    Returns:
        dict: Dictionary with status message.

    Raises:
        HTTPException(500): If an error occurs during model initialization.
    """
    try:
        retriever.init_custom_model(model_checkpoint = model_checkpoint)

        return {"Status": f"Модель {model_checkpoint} успешно инициализирована"}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Ошибка при инициализации модели: {str(e)}")


if __name__ == "__main__":
    uvicorn.run("main:app", port=8000, log_level='info') # , log_level='info', reload=True
